import argparse
import itertools

import torchvision.transforms as transforms
from torch.utils.data import DataLoader
from torch.autograd import Variable
from PIL import Image
import torch
import os
from models import Generator
from models import Discriminator
from utils import ReplayBuffer
from utils import LambdaLR
from utils import Logger
from utils import weights_init_normal, add_watermark_tensor, add_noise_patch
from utils import image2tensor
from utils import tensor2image
from datasetsWM import ImageDataset

parser = argparse.ArgumentParser()
parser.add_argument('--epoch',type=int,default=0,help='starting epoch')
parser.add_argument('--n_epochs',type=int,default=4,help='numbre of epochs of training')
parser.add_argument('--batchSize',type=int,default=16,help="size of the batch")
parser.add_argument('--dataroot', type=str, default='datasets/male2female/', help='root directory of the dataset')
parser.add_argument('--lr', type=float, default=0.0002, help='initial learning rate')
parser.add_argument('--decay_epoch', type=int, default=3, help='epoch to start linearly decaying the learning rate to 0')
parser.add_argument('--size', type=int, default=128, help='size of the data crop (squared assumed)')
parser.add_argument('--input_nc', type=int, default=3, help='number of channels of input data')
parser.add_argument('--output_nc', type=int, default=3, help='number of channels of output data')
parser.add_argument('--cuda', action='store_true', help='use GPU computation')
parser.add_argument('--debug', action='store_true', help='Skip training')
parser.add_argument('--n_cpu', type=int, default=8, help='number of cpu threads to use during batch generation')
opt = parser.parse_args()
print(opt)
lambda_cycle = 10.0
lambda_identity = 5.0

if torch.cuda.is_available() and not opt.cuda:
    print("Warning: You have CUDA device available, so you should probably use --cuda")

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
#________________________Variable Definitions___________________________#
# Networks
netG_A2B = Generator(opt.input_nc, opt.output_nc)
netG_B2A = Generator(opt.output_nc, opt.input_nc)
netD_A = Discriminator(opt.input_nc)
netD_B = Discriminator(opt.output_nc)

# netG_A2B = torch.compile(netG_A2B, mode="max-autotune")
# netG_B2A = torch.compile(netG_B2A, mode="max-autotune")
# netD_A = torch.compile(netD_A, mode="max-autotune")
# netD_B = torch.compile(netD_B, mode="max-autotune")

if opt.cuda:
    netG_A2B.to(device)
    netG_B2A.to(device)
    netD_A.to(device)
    netD_B.to(device)


#_______________________________Functions________________________________#
def load_model_weights(model, path):
    if os.path.exists(path):
        model.load_state_dict(torch.load(path))
        return True
    
    return False
#__________________________________________________________________________#

all_loaded = (
    load_model_weights(netG_A2B, 'outputWM/netG_A2B.pth') and
    load_model_weights(netG_B2A, 'outputWM/netG_B2A.pth') and
    load_model_weights(netD_A, 'outputWM/netD_A.pth') and
    load_model_weights(netD_B, 'outputWM/netD_B.pth')
)

if all_loaded:
    print("All model weights loaded successfully, proceeding...")
else:
    print("Failed to load all model weights. Initalising new weights...")
    netG_A2B.apply(weights_init_normal)
    netG_B2A.apply(weights_init_normal)
    netD_A.apply(weights_init_normal)
    netD_B.apply(weights_init_normal)

# Losses criteria
criterion_GAN = torch.nn.MSELoss()
criterion_cycle = torch.nn.L1Loss()
criterion_identity = torch.nn.L1Loss()

# Optimizers and Schedulers
optimizer_G = torch.optim.Adam(itertools.chain(netG_A2B.parameters(),netG_B2A.parameters()),lr=opt.lr, betas=(0.5,0.999))
optimizer_D_A = torch.optim.Adam(netD_A.parameters(), lr=opt.lr, betas=(0.5,0.999))
optimizer_D_B = torch.optim.Adam(netD_B.parameters(), lr=opt.lr, betas=(0.5,0.999))

lr_scheduler_G = torch.optim.lr_scheduler.LambdaLR(optimizer_G, lr_lambda=LambdaLR(opt.n_epochs, opt.epoch, opt.decay_epoch).step)
lr_scheduler_D_A = torch.optim.lr_scheduler.LambdaLR(optimizer_D_A, lr_lambda=LambdaLR(opt.n_epochs, opt.epoch, opt.decay_epoch).step)
lr_scheduler_D_B = torch.optim.lr_scheduler.LambdaLR(optimizer_D_B, lr_lambda=LambdaLR(opt.n_epochs, opt.epoch, opt.decay_epoch).step)

# Inputs and targets memory allocation
Tensor = torch.cuda.FloatTensor if opt.cuda else torch.Tensor
# input_A = Tensor(opt.batchSize, opt.input_nc, opt.size, opt.size)
# input_B = Tensor(opt.batchSize, opt.output_nc, opt.size, opt.size)
# input_wA = Tensor(opt.batchSize, opt.input_nc, opt.size, opt.size)
# input_wB = Tensor(opt.batchSize, opt.output_nc, opt.size, opt.size)
target_real = Variable(Tensor(opt.batchSize).fill_(1.0), requires_grad=False)
target_fake = Variable(Tensor(opt.batchSize).fill_(0.0), requires_grad=False)


fake_A_buffer = ReplayBuffer()
fake_B_buffer = ReplayBuffer()

# Dataset loader
transforms_ = [ transforms.Resize(int(opt.size*1.12), Image.BICUBIC), 
                transforms.RandomCrop(opt.size),
                transforms.RandomHorizontalFlip(),
                transforms.ToTensor(),
                transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5)) ]

dataset = ImageDataset(
    root=opt.dataroot,
    transforms_=transforms_,
    unaligned=True,
    watermark_tensor = image2tensor("copy.png",(24, 24))*2-1,
    wm_pos=(0.0, 0.0)  # Top-Left
)

dataloader = DataLoader(dataset, batch_size=opt.batchSize, shuffle=True, num_workers=opt.n_cpu)

#_____________________________________________________________________________________#
# Loss plot
logger = Logger(opt.n_epochs, len(dataloader))
# Debug
if opt.debug:
    watermark = image2tensor("copy.png")
    batch = next(iter(dataloader))
    for label in ['A', 'B', 'wA', 'wB','nA','nB']:
        img = batch[label][0]
        img_np = tensor2image(img)
        logger.img(img_np, f"{label}_original")

        if label in ['A', 'B']:
            wm = tensor2image(add_watermark_tensor(img, watermark, pos=(0.0, 0.0)))
            print(watermark.shape)
            print(tuple(watermark.shape[1:])
)
            noise = tensor2image(add_noise_patch(img))
            logger.img(wm, f"{label}_watermarked")
            logger.img(noise, f"{label}_noise")

    exit()

#_____________________________________________________________________________________#
#___________________________________Training__________________________________________#
for epoch in range(opt.epoch, opt.n_epochs):
    for i, batch in enumerate(dataloader):
        # Set model input
        if opt.cuda:

            real_A = batch['A'].to(device)
            real_B = batch['B'].to(device)
            wm_A   = batch['wA'].to(device)
            wm_B   = batch['wB'].to(device)
            n_A   = batch['nA'].to(device)
            n_B   = batch['nB'].to(device)
        else:
            real_A = batch['A']
            real_B = batch['B']
            wm_A   = batch['wA']
            wm_B   = batch['wB']
            n_A   = batch['nA']
            n_B   = batch['nB']


        # Generators A2B and B2A
        optimizer_G.zero_grad()

        # Identity loss
        # G_A2B(B) should equal wm_B if real B is fed
        same_B = netG_A2B(real_B)
        loss_identity_B = criterion_identity(same_B,wm_B)*lambda_identity
        # G_B2A(B) should equal wm_A if real A is fed
        same_A = netG_B2A(real_A)
        loss_identity_A = criterion_identity(same_A,wm_A)*lambda_identity

        # GAN loss
        fake_B =  netG_A2B(real_A)
        pred_fake_B = netD_B(fake_B)
        loss_GAN_A2B = criterion_GAN(pred_fake_B, target_real)
        
        
        fake_A =  netG_B2A(real_B)
        pred_fake_A = netD_A(fake_A)
        loss_GAN_B2A = criterion_GAN(pred_fake_A, target_real)

        # Cycle loss
        recovered_A = netG_B2A(fake_B)
        loss_cycle_ABA = criterion_cycle(recovered_A,wm_A)*lambda_cycle

        recovered_B = netG_A2B(fake_A)
        loss_cycle_BAB = criterion_cycle(recovered_B,wm_B)*lambda_cycle

        # Tatal loss
        loss_G = loss_identity_A + loss_identity_B + loss_GAN_A2B + loss_GAN_B2A + loss_cycle_ABA + loss_cycle_BAB
        loss_G.backward()

        optimizer_G.step()

        #_____________________________________________________________________#

        #_________________________ Discriminator A ___________________________#
        optimizer_D_A.zero_grad()

        # Real loss
        pred_real = netD_A(real_A)
        loss_D_real = criterion_GAN(pred_real,target_real)

        # Fake loss
        fake_A = fake_A_buffer.push_and_pop(fake_A)
        pred_fake = netD_A(fake_A.detach())
        loss_D_fake = criterion_GAN(pred_fake,target_fake)

        # Total loss
        loss_D_A = (loss_D_real + loss_D_fake)*0.5
        loss_D_A.backward()

        optimizer_D_A.step()
        #_____________________________________________________________________#

        #_________________________ Discriminator B ___________________________#
        optimizer_D_B.zero_grad()

        # Real loss
        pred_real = netD_B(real_B)
        loss_D_real = criterion_GAN(pred_real,target_real)

        # Fake loss
        fake_B = fake_B_buffer.push_and_pop(fake_B)
        pred_fake = netD_A(fake_B.detach())
        loss_D_fake = criterion_GAN(pred_fake,target_fake)
        
        # Total loss
        loss_D_B = (loss_D_real + loss_D_fake)*0.5
        loss_D_B.backward()

        optimizer_D_B.step()
        #_____________________________________________________________________#

        #_______________ Progress report(http://localhost:8097)_______________#
        if i %4 ==0:
            logger.log({'loss_G': loss_G, 'loss_G_identity': (loss_identity_A + loss_identity_B), 'loss_G_GAN': (loss_GAN_A2B + loss_GAN_B2A),
                        'loss_G_cycle': (loss_cycle_ABA + loss_cycle_BAB), 'loss_D': (loss_D_A + loss_D_B)}, 
                        images={'real_A': real_A, 'real_B': real_B, 'fake_A': fake_A, 'fake_B': fake_B})
            
    #________________________ Update learning rates___________________________#
    lr_scheduler_G.step()
    lr_scheduler_D_A.step()
    lr_scheduler_D_B.step()

    #_________________________ Save models checkpoints________________________# 
    torch.save(netG_A2B.state_dict(), 'outputWM/netG_A2B.pth')
    torch.save(netG_B2A.state_dict(), 'outputWM/netG_B2A.pth')
    torch.save(netD_B.state_dict(), 'outputWM/netD_A.pth')
    torch.save(netD_B.state_dict(), 'outputWM/netD_B.pth')
    #_________________________________________________________________________#